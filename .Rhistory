gregexpr('MEEP', AA)
#input 2 sequences
DNA <- bio3d::read.fasta(r'(E:\Desktop\P53DNA.fasta)')
DNA <- paste(DNA$ali, collapse = '')
DNA <- substr(DNA, 46*3+1, nchar(DNA))
DNA <- Biostrings::DNAString(DNA)
AA <- as.character(Biostrings::translate(DNA))
DNA <- as.character(DNA)
AA
#input 2 sequences
DNA <- bio3d::read.fasta(r'(E:\Desktop\P53DNA.fasta)')
DNA <- paste(DNA$ali, collapse = '')
DNA <- substr(DNA, 45*3+1, nchar(DNA))
DNA <- Biostrings::DNAString(DNA)
AA <- as.character(Biostrings::translate(DNA))
DNA <- as.character(DNA)
AA
DNA
#lets try on the two sequences
getResidue(DNA,5)
getResidue(DNA,5)
#lets try on the two sequences
getResidue(AA,5)
getResidue(DNA,5)
#make the two sequences into two differnt class of objects
P53DNA <- list(name = 'P53', seq = DNA)
class(P53DNA) <- 'DNA'
P53DNA
class(P53DNA)
#make the two sequences into two differnt class of objects
P53DNA <- list(name = 'P53', seq = DNA, class(P53DNA) = 'DNA')
class(P53DNA)
class(P53AA)
P53DNA <- list(name = 'P53', seq = DNA)
class(P53DNA) <- 'DNA'
P53AA <- list(name = 'P53', seq = AA)
class(P53AA) <- 'AA'
class(P53DNA)
class(P53AA)
#write a generic function
getResidue <- function(x) UseMethod("getResidue")
#write the specific methods for the two classes
getResidue.DNA <- function(seq, pos){
codon <- substr(seq, pos*3-2, pos*3)
return(as.character(Biostrings::GENETIC_CODE[[codon]]))
}
getResidue(P53DNA, 5)
#write a generic function
getResidue <- function(seq, pos) UseMethod("getResidue")
#write the specific methods for the two classes
getResidue.DNA <- function(seq, pos){
codon <- substr(seq, pos*3-2, pos*3)
return(as.character(Biostrings::GENETIC_CODE[[codon]]))
}
getResidue(P53DNA, 5)
seq = P53DNA$seq
#write the specific methods for the two classes
getResidue.DNA <- function(seq, pos){
codon <- substr(seq$seq, pos*3-2, pos*3)
return(as.character(Biostrings::GENETIC_CODE[[codon]]))
}
getResidue(P53DNA, 5)
#write the specific methods for the two classes
getResidue.DNA <- function(seq, pos){
codon <- substr(seq$seq, pos*3-2, pos*3)
resi <- as.character(Biostrings::GENETIC_CODE[[codon]])
out <- list(resi = resi)
class(out) <- 'AminoAcid'
return(out)
}
getResidue(P53DNA, 5)
getResidue.AA <- function(seq, pos){
resi <- substr(seq$seq, pos, pos)
out <- list(resi = resi)
class(out) <- 'AminoAcid'
return(out)
}
getResidue(P53DNA, 5)
getResidue(P53AA, 5)
\U2661
"\U2661"
"\U2661 ^ \U2661"
#see how it works
getResidue('P53AAAA', 5)
getResidue.character <- function(seq, pos){
resi <- substr(seq, pos, pos)
out <- list(resi = resi)
class(out) <- 'AminoAcid'
return(out)
}
#see how it works
getResidue('P53AAAA', 5)
#see how it works
newAlignment
#see how it works
getResidue(P53AA,5)
getResidue(P53DNA,5)
AA
DNA
data.frame(seqs = c(P53DNA,P53AA,P53DNA,P53AA,P53DNA,P53DNA))
dt <- data.frame(seqs = c(P53DNA,P53AA,P53DNA,P53AA,P53DNA,P53DNA))
dt
View(dt)
dt <- list(c(P53DNA,P53AA,P53DNA,P53AA,P53DNA,P53DNA))
dt
#what if we have multiple sequences in the data set?
dt <- list(c(P53DNA,P53AA,P53AA,P53DNA,P53DNA,P53AA,P53DNA))
dt
lapply(dt, getResidue, pos = 5)
#what if we have multiple sequences in the data set?
dt <- c(P53DNA,P53AA,P53AA,P53DNA,P53DNA,P53AA,P53DNA)
lapply(dt, getResidue, pos = 5)
#what if we have multiple sequences in the data set?
dt <- c(P53DNA,P53AA,P53AA,P53DNA,P53DNA,P53AA,P53DNA)
dt
#what if we have multiple sequences in the data set?
dt <- list(P53DNA,P53AA,P53AA,P53DNA,P53DNA,P53AA,P53DNA)
lapply(dt, getResidue, pos = 5)
unlist(lapply(dt, getResidue, pos = 5))
####slide 5####
#how if we write the AA and DNA classes in S4?
setClass('DNA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'boolian'))
####slide 5####
#how if we write the AA and DNA classes in S4?
setClass('DNA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'boolean'))
####slide 5####
#how if we write the AA and DNA classes in S4?
setClass('DNA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'TRUE/FALSE'))
class(TRUE)
####slide 5####
#how if we write the AA and DNA classes in S4?
setClass('DNA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'ligical'))
####slide 5####
#how if we write the AA and DNA classes in S4?
setClass('DNA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'logical'))
setGeneric("getResidue", function(x){
standardGeneric("getResidue")
})
setClass('Amino Acid',
slots = list(residueType = 'character'))
setClass('AminoAcid',
slots = list(residueType = 'character'))
setGeneric("getResidue", function(seq, pos){
standardGeneric("getResidue")
})
setMethod("getResidue",
c(x = "DNA"),
function(seq, pos){
codon <- substr(seq$seq, pos*3-2, pos*3)
resi <- as.character(Biostrings::GENETIC_CODE[[codon]])
out <- new('AminoAcid', residueType = resi)
return(out)
})
setGeneric("getResidue", function(seq, pos){
standardGeneric("getResidue")
})
setMethod("getResidue",
c(x = "DNA"),
function(seq, pos){
codon <- substr(seq$seq, pos*3-2, pos*3)
resi <- as.character(Biostrings::GENETIC_CODE[[codon]])
out <- new('AminoAcid', residueType = resi)
return(out)
})
setMethod("getResidue",
c(seq = "DNA", pos = 'numeric'),
function(seq, pos){
codon <- substr(seq$seq, pos*3-2, pos*3)
resi <- as.character(Biostrings::GENETIC_CODE[[codon]])
out <- new('AminoAcid', residueType = resi)
return(out)
})
setMethod("getResidue",
c(seq = "AA", pos = 'numeric'),
function(seq, pos){
resi <- substr(seq$seq, pos, pos)
out <- new('AminoAcid', residueType = resi)
return(out)
})
setClass('AA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'logical'))
setClass('AminoAcid',
slots = list(residueType = 'character'))
setGeneric("getResidue", function(seq, pos){
standardGeneric("getResidue")
})
setMethod("getResidue",
c(seq = "DNA", pos = 'numeric'),
function(seq, pos){
codon <- substr(seq$seq, pos*3-2, pos*3)
resi <- as.character(Biostrings::GENETIC_CODE[[codon]])
out <- new('AminoAcid', residueType = resi)
return(out)
})
setMethod("getResidue",
c(seq = "AA", pos = 'numeric'),
function(seq, pos){
resi <- substr(seq$seq, pos, pos)
out <- new('AminoAcid', residueType = resi)
return(out)
})
getResidue(P53AA,5)
getResidue(P53DNA,5)
#see how it works
getResidue(P53AA,5)
getResidue(P53DNA,5)
#what if we have multiple sequences in the data set?
dt <- list(P53DNA,P53AA,P53AA,P53DNA,P53DNA,P53AA,P53DNA)
unlist(lapply(dt, getResidue, pos = 5))
lapply(dt, getResidue, pos = 5)
unlist(lapply(dt, getResidue, pos = 5))
unlist(as.character(lapply(dt, getResidue, pos = 5)))
unlist(lapply(dt, getResidue, pos = 5))
setMethod("getChar",
c(x = 'AminoAcid'),
function(x){
return(x@residueType)
})
#what to do if we want a vector of those residues?
setGeneric("getChar", function(x){
standardGeneric("getChar")
})
setMethod("getChar",
c(x = 'AminoAcid'),
function(x){
return(x@residueType)
})
lapply(AminoAcids, getChar)
AminoAcids <- lapply(dt, getResidue, pos = 5)
lapply(AminoAcids, getChar)
unlist(lapply(AminoAcids, getChar))
summerizedData()
#see how it works
P53AA <- new('DNA', name = 'P53', source = 'Hs', seq = DNA, is.P53 = T)
#see how it works
P53AA <- new('DNA', name = 'P53', source = 'Hs', seq = DNA, is.p53 = T)
P53AA <- new('AA', name = 'P53', source = 'Hs', seq = AA, is.p53 = T)
getResidue(P53AA,5)
getResidue(P53DNA,5)
####slide 5####
#how if we write the AA and DNA classes in S4?
setClass('DNA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'logical'))
setClass('AA',
slots = list(name = 'character',
source = 'character',
seq = 'character',
is.p53 = 'logical'))
setClass('AminoAcid',
slots = list(residueType = 'character'))
setGeneric("getResidue", function(seq, pos){
standardGeneric("getResidue")
})
setMethod("getResidue",
c(seq = "DNA", pos = 'numeric'),
function(seq, pos){
codon <- substr(seq@seq, pos*3-2, pos*3)
resi <- as.character(Biostrings::GENETIC_CODE[[codon]])
out <- new('AminoAcid', residueType = resi)
return(out)
})
setMethod("getResidue",
c(seq = "AA", pos = 'numeric'),
function(seq, pos){
resi <- substr(seq@seq, pos, pos)
out <- new('AminoAcid', residueType = resi)
return(out)
})
#see how it works
P53AA <- new('DNA', name = 'P53', source = 'Hs', seq = DNA, is.p53 = T)
P53AA <- new('AA', name = 'P53', source = 'Hs', seq = AA, is.p53 = T)
getResidue(P53AA,5)
getResidue(P53DNA,5)
#see how it works
P53DNA <- new('DNA', name = 'P53', source = 'Hs', seq = DNA, is.p53 = T)
P53AA <- new('AA', name = 'P53', source = 'Hs', seq = AA, is.p53 = T)
getResidue(P53AA,5)
getResidue(P53DNA,5)
#what if we have multiple sequences in the data set?
dt <- list(P53DNA,P53AA,P53AA,P53DNA,P53DNA,P53AA,P53DNA)
unlist(lapply(dt, getResidue, pos = 5))
#what to do if we want a vector of those residues?
setGeneric("getChar", function(x){
standardGeneric("getChar")
})
setMethod("getChar",
c(x = 'AminoAcid'),
function(x){
return(x@residueType)
})
AminoAcids <- lapply(dt, getResidue, pos = 5)
unlist(lapply(AminoAcids, getChar))
#classes can inherit from other classes
setClass("p53_DNA",
slots = list(mutated = 'logical',
mut_pos = 'numeric'),
contains = "DNA")
setClass("p53_AA",
slots = list(mutated = 'logical',
mut_pos = 'numeric'),
contains = "AA")
setGeneric("mutateP53", function(x, pos, mutTo){
standardGeneric("mutateP53")
})
setMethod("mutateP53",
c(seq = "DNA", pos = 'numeric', mutTo = 'Base'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@baseType
out <- new('AminoAcid', residueType = resi)
return(out)
})
setGeneric("mutateP53", function(x, pos, mutTo){
standardGeneric("mutateP53")
})
setMethod("mutateP53",
c(seq = "DNA", pos = 'numeric', mutTo = 'Base'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@baseType
out <- new('AminoAcid', residueType = resi)
return(out)
})
setGeneric("mutateP53", function(seq, pos, mutTo){
standardGeneric("mutateP53")
})
setMethod("mutateP53",
c(seq = "DNA", pos = 'numeric', mutTo = 'Base'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@baseType
out <- new('AminoAcid', residueType = resi)
return(out)
})
#why is this important? lets try to mutate P53
setClass('AminoAcid',
slots = list(residueType = 'character'))
setClass("Base",
slots = list(baseType = 'character'))
setGeneric("mutateP53", function(seq, pos, mutTo){
standardGeneric("mutateP53")
})
setMethod("mutateP53",
c(seq = "DNA", pos = 'numeric', mutTo = 'Base'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@baseType
out <- new('AminoAcid', residueType = resi)
return(out)
})
substr('12345', 2,2) <- 'A'
substr('12345', 2,2)
'1234'[3]
substr('12345', 2,2) <- 'T'
a <- '12345'
substr(a, 2,2) <- 'T'
a
b <- new('Base', baseType = 'A')
mutateP53(P53DNA, 5, b)
b
#classes can inherit from other classes
setClass("p53_DNA",
slots = list(mutated = 'logical',
mut_pos = 'numeric'),
contains = "DNA")
setClass("p53_AA",
slots = list(mutated = 'logical',
mut_pos = 'numeric'),
contains = "AA")
#why is this important? lets try to mutate P53
setClass('AminoAcid',
slots = list(residueType = 'character'))
setClass("Base",
slots = list(baseType = 'character'))
setGeneric("mutateP53", function(seq, pos, mutTo){
standardGeneric("mutateP53")
})
setMethod("mutateP53",
c(seq = "DNA", pos = 'numeric', mutTo = 'Base'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@baseType
return(seq)
})
setMethod("mutateP53",
c(seq = "AA", pos = 'numeric', mutTo = 'AminoAcid'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@residueType
out <- new('AminoAcid', residueType = resi)
return(out)
})
b <- new('Base', baseType = 'A')
mutateP53(P53DNA, 5, b)
setMethod("mutateP53",
c(seq = "AA", pos = 'numeric', mutTo = 'AminoAcid'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@residueType
return(seq)
})
newP53 <- mutateP53(P53DNA, 14, 'T')
newP53 <- mutateP53(P53DNA, 14, b)
getResidue(newP53,5)
b <- new('Base', baseType = 'A')
newP53 <- mutateP53(P53DNA, 14, b)
getResidue(newP53,5)
b <- new('Base', baseType = 'A')
newP53 <- mutateP53(P53DNA, 13, b)
getResidue(newP53,5)
newP53AA <- mutateP53(P53AA, 5, b)
setMethod("mutateP53",
c(seq = "AA", pos = 'numeric', mutTo = 'AminoAcid'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@residueType
return(seq)
})
newP53AA <- mutateP53(P53AA, 5, a)
a <- new('AminoAcid', residueType = 'K')
newP53AA <- mutateP53(P53AA, 5, a)
getResidue(newP53AA,5)
setClass("p53_DNA",
slots = list(mutated = 'logical',
mut_pos = 'numeric'),
contains = "DNA")
setClass("p53_AA",
slots = list(mutated = 'logical',
mut_pos = 'numeric'),
contains = "AA")
#why is this important? lets try to mutate P53
setClass('AminoAcid',
slots = list(residueType = 'character'))
setClass("Base",
slots = list(baseType = 'character'))
setGeneric("mutateP53", function(seq, pos, mutTo){
standardGeneric("mutateP53")
})
setMethod("mutateP53",
c(seq = "DNA", pos = 'numeric', mutTo = 'Base'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@baseType
return(seq)
})
setMethod("mutateP53",
c(seq = "AA", pos = 'numeric', mutTo = 'AminoAcid'),
function(seq, pos, mutTo){
substr(seq@seq, pos, pos) <- mutTo@residueType
return(seq)
})
b <- new('Base', baseType = 'A')
a <- new('AminoAcid', residueType = 'K')
newP53DNA <- mutateP53(P53DNA, 13, b)
getResidue(newP53DNA,5)
newP53AA <- mutateP53(P53AA, 5, a)
getResidue(newP53AA,5)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 1)
source("E:/ProBound/PlotLogo_function.R")
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 1)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 2)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 3)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 1)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 2)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 3)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 1)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 2)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 3)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 4)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = c(1:4))
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 1)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 2)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 3)
main(model = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\fit.models.consensus.json)',
out_file = r'(E:\Desktop\RM_Rotation_3\nub_probound\4rounds\results_multiModel\)', feat = 'both', mode = 4)
roxygen2()
roxygen2::roxygenise()
library(FamilyCode)
setwd('E:/Desktop/ChipPRDM1')
getwd()
