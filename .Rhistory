addList <- c()
confidenceList <- c()
for(j in svdModel$keyPos[[i]]){
aa <- substr(Alignment$alignment[ali],j,j)
uset <- svdModel$uList[[i]][[j]]
add <- uset[uset$aa == aa, 2]
if(length(add) == 0){
if(!useSimilarAA){
addList <- c(addList, 0)
confidenceList <- c(confidenceList,0)
}else{
#weighted mean of uset, weighted by 1/(non-replacement blosum62 score - replacement blosum62 score)
sim <- BLOSUM62[aa,uset$aa]
max <- BLOSUM62[aa,aa]
sim <- 1/(max - sim)
add <- sum(uset$mean * sim) / sum(sim)
addList <- c(addList, add)
confidenceList <- c(confidenceList, max(sim)/nrow(svdModel$alignment))
}
}else{
addList <- c(addList, add)
confidenceList <- c(confidenceList, sum(substr(svdModel$alignment$alignment,j,j)==aa)/nrow(svdModel$alignment))
}
}
synUtest[[i]] <- addList
confidences[[i]] <- confidenceList
}
predTest <- c()
for(i in 1:length(svdModel$keyPos)){
predTest <- c(predTest, sum(svdModel$model[[i]][1:length(svdModel$keyPos[[i]])+1] * synUtest[[i]]) + svdModel$model[[i]][1])
}
pred <- predTest %*% diag(svdModel$svd$d) %*% t(svdModel$svd$v)
predList <- c(predList, pred)
}
synUtest
confidences
svdModel$svd
confidenceList
confidences
svdModel$model[[i]]
add <- sum(confidences[[i]] * svdModel$model[[i]][-1] * svdModel$svd$d[i])
sum(confidences[[i]] * svdModel$model[[i]][-1] * svdModel$svd$d[i])
svdModel$svd$d[i]
svdModel
svdModel$svd$d
i
i = 1
sum(confidences[[i]] * svdModel$model[[i]][-1] * svdModel$svd$d[i])
#weighted sum for confidence sum of confidence * beta * d-vector
confidence <- 0
for(i in 1:length(confidences)){
add <- sum(confidences[[i]] * svdModel$model[[i]][-1] * svdModel$svd$d[i])
confidence <- sum(confidence, add)
}
confidence
predMatrix1
tetra_trans_matrix <- matrix(data = c(1,1,1,1,-1,-1,-1,1,-1,-1,-1,1), nrow = 4, ncol = 3, byrow = TRUE)
pssm_trans_matrix <- MASS::ginv(tetra_trans_matrix)
mean_matrix <- matrix(nrow = length(predList)/3, ncol = 3, data = svdModel$svd$tetra_mean, byrow = T)
predMatrix <- matrix(nrow = length(predList)/3, ncol = 3, data = predList, byrow = T)
predMatrix1 <- apply(t((predMatrix+mean_matrix)%*%pssm_trans_matrix + 0.25), 2, function(x) x/max(x))
predMatrix1[predMatrix1 < zero] <- zero
zero = 0.001
predMatrix1[predMatrix1 < zero] <- zero
colnames(predMatrix1) <- Alignment$name
rownames(predMatrix1) <- c('A','C','G','T')
predMatrix1
attr(predMatrix1,'confidence') <- confList
confList <- c(confList, confidence)
svdModel <- object
if(length(svdModel$keyPos) != 3){
print('Cannot perform tetrahedron transformation, number of PCs should be 3')
return()
}
predList <- c()
confList <- c()
for(ali in 1:nrow(Alignment)){
synUtest <- list()
confidences <- list()
for(i in 1:length(svdModel$keyPos)){
addList <- c()
confidenceList <- c()
for(j in svdModel$keyPos[[i]]){
aa <- substr(Alignment$alignment[ali],j,j)
uset <- svdModel$uList[[i]][[j]]
add <- uset[uset$aa == aa, 2]
if(length(add) == 0){
if(!useSimilarAA){
addList <- c(addList, 0)
confidenceList <- c(confidenceList,0)
}else{
#weighted mean of uset, weighted by 1/(non-replacement blosum62 score - replacement blosum62 score)
sim <- BLOSUM62[aa,uset$aa]
max <- BLOSUM62[aa,aa]
sim <- 1/(max - sim)
add <- sum(uset$mean * sim) / sum(sim)
addList <- c(addList, add)
confidenceList <- c(confidenceList, max(sim)/nrow(svdModel$alignment))
}
}else{
addList <- c(addList, add)
confidenceList <- c(confidenceList, sum(substr(svdModel$alignment$alignment,j,j)==aa)/nrow(svdModel$alignment))
}
}
synUtest[[i]] <- addList
confidences[[i]] <- confidenceList
}
predTest <- c()
for(i in 1:length(svdModel$keyPos)){
predTest <- c(predTest, sum(svdModel$model[[i]][1:length(svdModel$keyPos[[i]])+1] * synUtest[[i]]) + svdModel$model[[i]][1])
}
pred <- predTest %*% diag(svdModel$svd$d) %*% t(svdModel$svd$v)
predList <- c(predList, pred)
#weighted sum for confidence sum of confidence * beta * d-vector
confidence <- 0
for(i in 1:length(confidences)){
add <- sum(confidences[[i]] * svdModel$model[[i]][-1] * svdModel$svd$d[i])
confidence <- sum(confidence, add)
}
confList <- c(confList, confidence)
}
tetra_trans_matrix <- matrix(data = c(1,1,1,1,-1,-1,-1,1,-1,-1,-1,1), nrow = 4, ncol = 3, byrow = TRUE)
pssm_trans_matrix <- MASS::ginv(tetra_trans_matrix)
mean_matrix <- matrix(nrow = length(predList)/3, ncol = 3, data = svdModel$svd$tetra_mean, byrow = T)
predMatrix <- matrix(nrow = length(predList)/3, ncol = 3, data = predList, byrow = T)
predMatrix1 <- apply(t((predMatrix+mean_matrix)%*%pssm_trans_matrix + 0.25), 2, function(x) x/max(x))
predMatrix1[predMatrix1 < zero] <- zero
colnames(predMatrix1) <- Alignment$name
rownames(predMatrix1) <- c('A','C','G','T')
attr(predMatrix1,'confidence') <- confList
predMatrix1
devtools::build()
devtools::build()
confidences <- c(confidences, attr('confidence', pred_motifs))
#Predict binding motifs for test set
pred_motifs <- predict(svdModel, test_alignment, zero = 0.01)
pred_motifs
#Predict binding motifs for test set
pred_motifs <- predict(svdModel, test_alignment, zero = 0.01)
svdModel
svdModel$alignment
attr('confidence', pred_motifs)
pred_motifs
#Predict binding motifs for test set
pred_motifs <- predict(svdModel, test_alignment, zero = zero)
pred_motifs
remove.packages("FamilyCode")
install.packages("E:/Desktop/FamilyCode/FamilyCode_0.1.23.tar.gz", repos = NULL, type = "source")
library(FamilyCode)
svdModel <- trainSVDModel(svd, train_alignment, Ftest_pVal = Ftest_pVal)
no.keyPos[t,] <- unlist(lapply(svdModel$keyPos,function(x) length(x)))
#Predict binding motifs for test set
pred_motifs <- predict(svdModel, test_alignment, zero = zero)
pred_motifs
svdModel
#Predict binding motifs for test set
pred_motifs <- predict(svdModel, test_alignment, zero = zero)
pred_motifs
test_alignment
svdModel
svdModel <- trainSVDModel(svd, train_alignment, Ftest_pVal = Ftest_pVal)
svdModel <- trainSVDModel(svd, train_alignment, Ftest_pVal = Ftest_pVal)
library(FamilyCode)
svdModel <- trainSVDModel(svd, train_alignment, Ftest_pVal = Ftest_pVal)
library(FamilyCode)
svdModel <- trainSVDModel(svd, train_alignment, Ftest_pVal = Ftest_pVal)
trainSVDModel
trainSVDModel <- trainSVD.Iterative
t
svdModel <- trainSVDModel(svd, train_alignment, Ftest_pVal = Ftest_pVal)
no.keyPos[t,] <- unlist(lapply(svdModel$keyPos,function(x) length(x)))
svdModel
#Predict binding motifs for test set
pred_motifs <- predict(svdModel, test_alignment, zero = zero)
pred_motifs
attr('confidence', pred_motifs)
pred_motifs
attr(pred_motifs,'confidence')
devtools::build()
max(table(substr(Alignment$alignment,j,j)))
devtools::build()
#' Predict with SVD-regression model
#'
#' Predict binding matrix with SVD-regression model
#' @param object SVD-regression model result from trainSVD()
#' @param Alignment Alignment table with name and aligned sequences to be predicted
#' @param zero Lower limit to be assigned to predicted values
#' @param useSimilarAA Use the weighted sum of similar AA when no matching AA is found in training data
#' @param ... Place holder for generic function
#' @return Matrix of binding motif models in frequency measurements. attr('confidence') give confidence estimates of prediction
#' @export
predict.SVD <- function(object, Alignment, zero = 0.001, useSimilarAA = F, ...){
svdModel <- object
if(length(svdModel$keyPos) != 3){
print('Cannot perform tetrahedron transformation, number of PCs should be 3')
return()
}
predList <- c()
confList <- c()
for(ali in 1:nrow(Alignment)){
synUtest <- list()
confidences <- list()
for(i in 1:length(svdModel$keyPos)){
addList <- c()
confidenceList <- c()
for(j in svdModel$keyPos[[i]]){
aa <- substr(Alignment$alignment[ali],j,j)
uset <- svdModel$uList[[i]][[j]]
add <- uset[uset$aa == aa, 2]
if(length(add) == 0){
if(!useSimilarAA){
addList <- c(addList, 0)
confidenceList <- c(confidenceList,0)
}else{
#weighted mean of uset, weighted by 1/(non-replacement blosum62 score - replacement blosum62 score)
sim <- BLOSUM62[aa,uset$aa]
max <- BLOSUM62[aa,aa]
sim <- 1/(max - sim)
add <- sum(uset$mean * sim) / sum(sim)
addList <- c(addList, add)
confidenceList <- c(confidenceList, max(sim)/max(table(substr(Alignment$alignment,j,j))))
}
}else{
addList <- c(addList, add)
confidenceList <- c(confidenceList, sum(substr(svdModel$alignment$alignment,j,j)==aa)/max(table(substr(Alignment$alignment,j,j))))
}
}
synUtest[[i]] <- addList
confidences[[i]] <- confidenceList
}
predTest <- c()
for(i in 1:length(svdModel$keyPos)){
predTest <- c(predTest, sum(svdModel$model[[i]][1:length(svdModel$keyPos[[i]])+1] * synUtest[[i]]) + svdModel$model[[i]][1])
}
pred <- predTest %*% diag(svdModel$svd$d) %*% t(svdModel$svd$v)
predList <- c(predList, pred)
#weighted sum for confidence sum of confidence * beta * d-vector
confidence <- 0
for(i in 1:length(confidences)){
add <- sum(confidences[[i]] * svdModel$model[[i]][-1]) * #svdModel$svd$d[i])
confidence <- sum(confidence, add)
}
confList <- c(confList, confidence)
}
tetra_trans_matrix <- matrix(data = c(1,1,1,1,-1,-1,-1,1,-1,-1,-1,1), nrow = 4, ncol = 3, byrow = TRUE)
pssm_trans_matrix <- MASS::ginv(tetra_trans_matrix)
mean_matrix <- matrix(nrow = length(predList)/3, ncol = 3, data = svdModel$svd$tetra_mean, byrow = T)
predMatrix <- matrix(nrow = length(predList)/3, ncol = 3, data = predList, byrow = T)
predMatrix1 <- apply(t((predMatrix+mean_matrix)%*%pssm_trans_matrix + 0.25), 2, function(x) x/max(x))
predMatrix1[predMatrix1 < zero] <- zero
colnames(predMatrix1) <- Alignment$name
rownames(predMatrix1) <- c('A','C','G','T')
attr(predMatrix1,'confidence') <- confList
return(predMatrix1)
}
devtools::build()
devtools::build()
svdModel$svd$d
svdModel$model[[i]][-1]
confidences[[i]]
predList <- c()
confList <- c()
for(ali in 1:nrow(Alignment)){
synUtest <- list()
confidences <- list()
for(i in 1:length(svdModel$keyPos)){
addList <- c()
confidenceList <- c()
for(j in svdModel$keyPos[[i]]){
aa <- substr(Alignment$alignment[ali],j,j)
uset <- svdModel$uList[[i]][[j]]
add <- uset[uset$aa == aa, 2]
if(length(add) == 0){
if(!useSimilarAA){
addList <- c(addList, 0)
confidenceList <- c(confidenceList,0)
}else{
#weighted mean of uset, weighted by 1/(non-replacement blosum62 score - replacement blosum62 score)
sim <- BLOSUM62[aa,uset$aa]
max <- BLOSUM62[aa,aa]
sim <- 1/(max - sim)
add <- sum(uset$mean * sim) / sum(sim)
addList <- c(addList, add)
confidenceList <- c(confidenceList, max(sim)/max(table(substr(Alignment$alignment,j,j))))
}
}else{
addList <- c(addList, add)
confidenceList <- c(confidenceList, sum(substr(svdModel$alignment$alignment,j,j)==aa)/max(table(substr(Alignment$alignment,j,j))))
}
}
synUtest[[i]] <- addList
confidences[[i]] <- confidenceList
}
predTest <- c()
for(i in 1:length(svdModel$keyPos)){
predTest <- c(predTest, sum(svdModel$model[[i]][1:length(svdModel$keyPos[[i]])+1] * synUtest[[i]]) + svdModel$model[[i]][1])
}
pred <- predTest %*% diag(svdModel$svd$d) %*% t(svdModel$svd$v)
predList <- c(predList, pred)
#weighted sum for confidence sum of confidence * beta * d-vector
confidence <- 0
for(i in 1:length(confidences)){
add <- sum(confidences[[i]] * svdModel$model[[i]][-1]) #* svdModel$svd$d[i])
confidence <- sum(confidence, add)
}
confList <- c(confList, confidence)
}
tetra_trans_matrix <- matrix(data = c(1,1,1,1,-1,-1,-1,1,-1,-1,-1,1), nrow = 4, ncol = 3, byrow = TRUE)
pssm_trans_matrix <- MASS::ginv(tetra_trans_matrix)
mean_matrix <- matrix(nrow = length(predList)/3, ncol = 3, data = svdModel$svd$tetra_mean, byrow = T)
predMatrix <- matrix(nrow = length(predList)/3, ncol = 3, data = predList, byrow = T)
predMatrix1 <- apply(t((predMatrix+mean_matrix)%*%pssm_trans_matrix + 0.25), 2, function(x) x/max(x))
predMatrix1[predMatrix1 < zero] <- zero
colnames(predMatrix1) <- Alignment$name
rownames(predMatrix1) <- c('A','C','G','T')
confidenceList
max(table(substr(Alignment$alignment,j,j)))
j
substr(Alignment$alignment,j,j)
i = 1
j = 13
for(i in 1:length(svdModel$keyPos)){
addList <- c()
confidenceList <- c()
for(j in svdModel$keyPos[[i]]){
aa <- substr(Alignment$alignment[ali],j,j)
uset <- svdModel$uList[[i]][[j]]
add <- uset[uset$aa == aa, 2]
if(length(add) == 0){
if(!useSimilarAA){
addList <- c(addList, 0)
confidenceList <- c(confidenceList,0)
}else{
#weighted mean of uset, weighted by 1/(non-replacement blosum62 score - replacement blosum62 score)
sim <- BLOSUM62[aa,uset$aa]
max <- BLOSUM62[aa,aa]
sim <- 1/(max - sim)
add <- sum(uset$mean * sim) / sum(sim)
addList <- c(addList, add)
confidenceList <- c(confidenceList, max(sim)/max(table(substr(Alignment$alignment,j,j))))
}
}else{
addList <- c(addList, add)
confidenceList <- c(confidenceList, sum(substr(svdModel$alignment$alignment,j,j)==aa)/max(table(substr(Alignment$alignment,j,j))))
}
}
synUtest[[i]] <- addList
confidences[[i]] <- confidenceList
}
i = 1
j = 13
aa <- substr(Alignment$alignment[ali],j,j)
uset <- svdModel$uList[[i]][[j]]
add <- uset[uset$aa == aa, 2]
if(length(add) == 0){
if(!useSimilarAA){
addList <- c(addList, 0)
confidenceList <- c(confidenceList,0)
}else{
#weighted mean of uset, weighted by 1/(non-replacement blosum62 score - replacement blosum62 score)
sim <- BLOSUM62[aa,uset$aa]
max <- BLOSUM62[aa,aa]
sim <- 1/(max - sim)
add <- sum(uset$mean * sim) / sum(sim)
addList <- c(addList, add)
confidenceList <- c(confidenceList, max(sim)/max(table(substr(Alignment$alignment,j,j))))
}
}else{
addList <- c(addList, add)
confidenceList <- c(confidenceList, sum(substr(svdModel$alignment$alignment,j,j)==aa)/max(table(substr(Alignment$alignment,j,j))))
}
confidenceList
substr(Alignment$alignment,j,j)
max(table(substr(Alignment$alignment,j,j)))
max(sim)
sim
sum(substr(svdModel$alignment$alignment,j,j)==aa)
svdModel$model[[i]][-1]
svdModel$model[[i]]
svdModel$model
svdModel <- object
confidences
confidence
devtools
devtools::build()
devtools::build()
remove.packages("FamilyCode")
confidences
svdModel$model
confidences[[i]] * svdModel$model[[i]][-1]
devtools::build()
predict.svd
predict.svd()
predict.SVD
devtools::build()
devtools::build()
devtools::build()
devtools::build()
length = 8
=paste0('P',1:length)
paste0('P',1:length)
HDfiltered_table_baseline
predTrue
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
length(SVDmodel)
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
pos
devtools::build()
predTrue
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
#' Match Alignment and Motif
#'
#' Match the order of mono_motifs list and Alignment data frame
#' @param mono_motifs List of motifs output from loadMono_motifs
#' @param Alignment Data frame of Alignment from concatAli
#' @param both If True both mono_motifs list and Alignment data frame is ouput; if False
#' only Alignment data frame is output
#' @return A filtered and reordered Alignment table (and mono_motif list)
#' @export
matchAliMotif <- function(mono_motifs, Alignment, both = F){
geneNames <- unlist(lapply(mono_motifs, function(x) x$name))
dele <- c()
for(i in 1:length(geneNames)){
if(length(which(geneNames[i] == Alignment$name)) == 0){
dele <- c(dele, i)
}
}
if(length(dele) > 0){
mono_motifs <- mono_motifs[-dele]
}
geneNames <- unlist(lapply(mono_motifs, function(x) x$name))
#rownames(Alignment) <- Alignment$name
out <- list()
out$alignment <- Alignment[geneNames,]
out$motifs <- mono_motifs
if(!both){
return(out$alignment)
}else{
return(out)
}
}
devtools::build()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
weights <- RJSONIO::fromJSON(paste(readLines(weightfile), collapse = ''))
weights <- weights$SR.Weights
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
